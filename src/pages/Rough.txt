 //ctrl + shift + g its for git stged for all files
 //npm audit fix --force 
  // description: <LocationMap latitude={12.97675} longitude={77.57528} />,

git clone https://github.com/yourusername/repositoryname.git
cd repositoryname
git remote set-url origin https://gitlab.com/yourusername/repositoryname.git
git push -u origin master
git remote set-url origin https://gitlab.com/yourusername/repositoryname.git

// Map integration

// MapComponent.js

import React from 'react';
import { GoogleMap, MarkerF } from '@react-google-maps/api';

const MapComponent = (props) => {

  const {latitude , longitude} = props;

  let ApiKey = 'AIzaSyAYX9RFzH6W0FQCNSx9mhw0o6y5qFDFDro';

  const mapContainerStyle = {
    width: '100%',
    height: '400px',
  };

  const center = {
    lat: latitude,
    lng: longitude,
  };

  return (
    <LoadScript
      googleMapsApiKey={ApiKey}>
        <GoogleMap
          mapContainerStyle={mapContainerStyle}
          center={center}
          zoom={15}>
          <MarkerF position={center} />
        </GoogleMap>
    </LoadScript>
  );
};

export default MapComponent;

//Another components
// MapComponent.js

import React from 'react';
import { GoogleMap, Marker } from '@react-google-maps/api';

const MapComponent = ({ latitude, longitude }) => {
  const mapContainerStyle = {
    width: '100%',
    height: '400px', // Set an appropriate height for your map
  };

  const center = {
    lat: latitude,
    lng: longitude,
  };

  return (
    <GoogleMap
      mapContainerStyle={mapContainerStyle}
      center={center}
      zoom={15} // Adjust the zoom level as needed
      apiKey={process.env.REACT_APP_API_KEY} // Use your API key here
    >
      <Marker position={center} />
    </GoogleMap>
  );
};

export default MapComponent;



//google color codes
--color-ref-primary0: #000000ff;
    --color-ref-primary10: #041e49ff;
    --color-ref-primary20: #062e6fff;
    --color-ref-primary25: #073888ff;
    --color-ref-primary30: #0842a0ff;
    --color-ref-primary40: #0b57d0ff;
    --color-ref-primary50: #1b6ef3ff;
    --color-ref-primary60: #4c8df6ff;
    --color-ref-primary70: #7cacf8ff;
    --color-ref-primary80: #a8c7faff;
    --color-ref-primary90: #d3e3fdff;
    --color-ref-primary95: #ecf3feff;
    --color-ref-primary99: #fafbffff;
    --color-ref-primary100: #ffffffff;
    --color-ref-secondary0: #000000ff;
    --color-ref-secondary10: #001d35ff;
    --color-ref-secondary12: #002238ff;
    --color-ref-secondary15: #002845ff;
    --color-ref-secondary20: #003355ff;
    --color-ref-secondary25: #003f66ff;
    --color-ref-secondary30: #004a77ff;
    --color-ref-secondary35: #005789ff;
    --color-ref-secondary40: #00639bff;
    --color-ref-secondary50: #047db7ff;
    --color-ref-secondary60: #3998d3ff;
    --color-ref-secondary70: #5ab3f0ff;
    --color-ref-secondary80: #7fcfffff;
    --color-ref-secondary90: #c2e7ffff;
    --color-ref-secondary95: #dff3ffff;
    --color-ref-secondary99: #f7fcffff;
    --color-ref-secondary100: #ffffffff;
    --color-ref-tertiary0: #000000ff;
    --color-ref-tertiary10: #072711ff;
    --color-ref-tertiary20: #0a3818ff;
    --color-ref-tertiary30: #0f5223ff;
    --color-ref-tertiary40: #146c2eff;
    --color-ref-tertiary50: #198639ff;
    --color-ref-tertiary60: #1ea446ff;
    --color-ref-tertiary70: #37be5fff;
    --color-ref-tertiary80: #6dd58cff;
    --color-ref-tertiary90: #c4eed0ff;
    --color-ref-tertiary95: #e7f8edff;
    --color-ref-tertiary99: #f2ffeeff;
    --color-ref-tertiary100: #ffffffff;
    --color-ref-error0: #000000ff;
    --color-ref-error10: #410e0bff;
    --color-ref-error20: #601410ff;
    --color-ref-error30: #8c1d18ff;
    --color-ref-error40: #b3261eff;
    --color-ref-error50: #dc362eff;
    --color-ref-error60: #e46962ff;
    --color-ref-error70: #ec928eff;
    --color-ref-error80: #f2b8b5ff;
    --color-ref-error90: #f9dedcff;
    --color-ref-error95: #fceeeeff;
    --color-ref-error99: #fffbf9ff;
    --color-ref-error100: #ffffffff;
    --color-ref-neutral0: #000000ff;
    --color-ref-neutral4: #0e0e0fff;
    --color-ref-neutral6: #131314ff;
    --color-ref-neutral8: #161818ff;
    --color-ref-neutral10: #1f1f1fff;
    --color-ref-neutral12: #1f2020ff;
    --color-ref-neutral15: #282828ff;
    --color-ref-neutral17: #2a2a2aff;
    --color-ref-neutral20: #303030ff;
    --color-ref-neutral22: #343535ff;
    --color-ref-neutral24: #393939ff;
    --color-ref-neutral25: #3c3c3cff;
    --color-ref-neutral30: #474747ff;
    --color-ref-neutral40: #5e5e5eff;
    --color-ref-neutral50: #757575ff;
    --color-ref-neutral60: #8f8f8fff;
    --color-ref-neutral70: #abababff;
    --color-ref-neutral80: #c7c7c7ff;


//Bms card

{bmsCardData?.map((item, index) => {
            return (
              <Card
              key={index}
              title={item.title}
              subTitle={item.subTitle}
              backContent={item?.description}
              color="#0e1a77"
              // isBarChart={
              //     index === 0 &&
              //     Array.isArray(item.description)
              // }
              isLineChart={
                  index === 0 || index ===1 || index ===2 || index ===3 &&
                  Array.isArray(item.description)
              }
              // isPieChart={
              //     index === 1 ||
              //     index === 2 ||
              //     index === 5 &&
              //         (Array.isArray(item.description))
              // }
              />
            );
          })}

 //{index === 2 ? <PieChart data={item[2]?.description}/>:item?.description}

import React, { useState } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

{vehicleCardData?.map((item, index) => {
    const isLineChart = (index === 0 || index === 1) && Array.isArray(item.description);
    const isPieChart = (index === 2 || index === 3 || index === 5) && Array.isArray(item.description);

    return (
        <Card
            key={index}
            title={item.title}
            subTitle={item.subTitle}
            color="00aa13"
            chartData={item?.description}
            isLineChart={isLineChart}
            isPieChart={isPieChart}
            lineChartLabels={item.labels}
            lineColor={item.colors}
            pieChartLabels={item.labels}
            pieChartColors={item.colors}
        />
    );
})}



const DateRangePicker = () => {
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);

  const handleStartDateChange = (date) => {
    setStartDate(date);
    if (date >= endDate) {
      setEndDate(new Date(date.getTime() + 86400000)); // Add one day to start date
    }
  };

  const handleEndDateChange = (date) => {
    setEndDate(date);
    if (date <= startDate) {
      setStartDate(new Date(date.getTime() - 86400000)); // Subtract one day from end date
    }
  };

  return (
    <div>
      <label>Start Date:</label>
      <DatePicker selected={startDate} onChange={handleStartDateChange} dateFormat="yyyy-MM-dd" />

      <label>End Date:</label>
      <DatePicker selected={endDate} onChange={handleEndDateChange} dateFormat="yyyy-MM-dd" />
    </div>
  );
};

export default DateRangePicker;


// have to import classNames package className={classNames(btnStyles, styles.btnStyles)} 

import React from 'react';

function MyComponent() {
  return (
    <ul>
      <li className={["class1", "class2"].join(" ")}>List item</li>
    </ul>
  );
}

export default MyComponent;

 {/* <div className="filterBox">
        <div className="filterTitle">
          <span>State</span>
          <span>ðŸ§¹</span>
        </div>

        <div className="filterSearch">
          <VscSearch size={20} />
          <input type="text" size="10" placeholder="Search.." />
        </div>

        <div className="filterCheck">
          <input type="checkbox" />
          <input type="checkbox" />
        </div>
      </div> */}

      {/* <FlipCard
            frontContent={
              <div>
                <div className="num">0.0 </div>
                <div> Avg Motor Temp (&deg;C)</div>
              </div>
            }
            backContent={<p>Back Content</p>}
          />

          <FlipCard
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />

          <FlipCard
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <FlipCard
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <FlipCard
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <FlipCard
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          /> */}


          {/* <div className="filterContainer">
        {Object.keys(filterData).map((tab, index) => (
          <div
            key={index}
            className="filter"
            onClick={() => handleOpenModal(tab)}
          >
            <span>{tab.charAt(0).toUpperCase() + tab.slice(1)}</span>

            <span>
              <FilterAltIcon />
            </span>
          </div>
        ))}
      </div> */}

  const Navbar = () => {
    
  const location = useLocation();

  return (
    <nav>
      <ul>
        <li className={location.pathname === '/' ? 'active' : ''}>
          <Link to="/">Home</Link>
        </li>
        <li className={location.pathname === '/about' ? 'active' : ''}>
          <Link to="/about">About</Link>
        </li>
        {/* Add more Link items for other routes */}
      </ul>
    </nav>
  );
};

export default Navbar;


// for active button 

import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';

  return (
    <div className="btnContainer">
      <button
        className={activeButton === 'vehicle' ? 'activeButton' : ''}
        onClick={redirectToVehicle}
      >
        Vehicle Details
      </button>
      <button
        className={activeButton === 'bms' ? 'activeButton' : ''}
        onClick={redirectToBms}
      >
        BMS Details
      </button>
      <button
        className={activeButton === 'vcu' ? 'activeButton' : ''}
        onClick={redirectToVcu}
      >
        VCU Details
      </button>
    </div>
  );

export default ButtonComponent;


//form Handling 

import React, { useState } from "react";
import { signInWithEmailAndPassword, sig } from "firebase/auth";
// import "./login.css";
import "../loginPage/myLogin.css"
import { useNavigate } from "react-router-dom";
import { auth } from "../../config/firebase";

const LoginPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({
    email: "",
    password: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };
  const isValidEmail = (email) => {
    // Regular expression for basic email validation
    const emailRegex = /^\S+@\S+\.\S+$/;
    return emailRegex.test(email);
  };

  const isValidPassword = (password) => {
    // Regular expressions for password validation
    const symbolRegex = /[!@#$%^&*(),.?":{}|<>]/;
    const numberRegex = /[0-9]/;
    const upperCaseRegex = /[A-Z]/;
    const lowerCaseRegex = /[a-z]/;
    return (
      password.length >= 8 &&
      symbolRegex.test(password) &&
      numberRegex.test(password) &&
      upperCaseRegex.test(password) &&
      lowerCaseRegex.test(password)
    );
  };

  const validateForm = () => {
    let newErrors = {};
    if (!formData.email) {
      newErrors.email = "Email is required";
    } else if (!isValidEmail(formData.email)) {
      newErrors.email = "Invalid email format";
    }
    if (!formData.password) {
      newErrors.password = "Password is required";
    } else if (!isValidPassword(formData.password)) {
      newErrors.password =
        "Password must be at least 8 characters long and contain at least one symbol, one number, one uppercase letter, and one lowercase letter";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const onLogin = (e) => {
    e.preventDefault();
    signInWithEmailAndPassword(auth, formData.email, formData.password)
      .then((userCredential) => {
        // Signed in
        const user = userCredential.user;
        navigate("/home");
        localStorage.setItem("user_id", user.uid);
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorCode, errorMessage);
      });
  };
  return (
    <div className="loginContainer">
      <form className="loginForm">
        <img
          src="https://s3.ap-south-1.amazonaws.com/greentiger.in-content/brand_icons/logo.png"
          alt="logo"
          style={{
            width: "90%",
            height: "20%",
            padding: "10px",
          }}
        />

        <div className="formGroup">
          <label>Email</label>
          <input
            type="email"
            name="email"
            id="email"
            value={formData.email}
            placeholder="Enter your email"
            required
            onChange={handleChange}
          />
          {errors.email && (
            <div className="error">{errors.email}</div>
          )}
        </div>

        <div className="formGroup">
          <label>Password</label>
          <input
            type="password"
            name="password"
            value={formData.password}
            placeholder="Enter your password"
            id="password"
            required
            onChange={handleChange}
          />
          {errors.password && <div className="error">{errors.password}</div>}
        </div>

        <button type="submit" onClick={onLogin}>
          Login
        </button>
      </form>
    </div>
  );
};
export default LoginPage;


// card media queries & styles

.card {
  width: calc(33.33% - 20px); /* 20px is the total margin space between cards */
  height: calc(33.33vh - 20px); /* Adjust based on your design */
  margin: 10px;
  float: left;
  box-sizing: border-box;
}

@media screen and (max-width: 768px) {
  .card {
    width: calc(50% - 20px); /* For smaller screens, show 2 cards per row */
    height: calc(50vh - 20px); /* Adjust based on your design */
  }
}

@media screen and (max-width: 480px) {
  .card {
    width: calc(100% - 20px); /* For even smaller screens, show 1 card per row */
    height: calc(100vh - 20px); /* Adjust based on your design */
  }
}

//Bms previous page

import React, { useState } from "react";
import "../bmsPage/bms.css";
import { useNavigate } from "react-router-dom";
import FilterBox from "../../components/filterBox/FilterBox";
import Card from "../../components/cards/Card";
import { FilterData } from "../../data/FilterData";
const Bms = () => {
  const navigate = useNavigate();

  const redirectToVcu = () => {
    navigate("/vcu");
  };
  const redirectToBms = () => {
    navigate("/bms");
  };

  const redirectToVehicle = () => {
    navigate("/vehicledetails");
  };

  const [date, setDate] = useState({
    startDate: "",
    endDate: "",
  });

  // console.log(date);

  return (
    <div className="bmsContainer">
      {/* vehicle header */}
      <div className="bmsHeader">
        <div className="bmsLogo">
          <img
            className="bmsImg"
            src="https://s3.ap-south-1.amazonaws.com/greentiger.in-content/brand_icons/logo.png"
            alt="logo"
          />
        </div>

        <div className="bmsRightBlock">
          <div className="bmsTitle">
            <h1>BMS Details</h1>
          </div>

          <div className="bmsVehicleNumbers">
            <h2>2</h2>
            <p>Vehicles</p>
          </div>

          <div className="bmsDateRange">
            <input
              type="date"
              placeholder="Select a date"
              value={date.startDate}
              onChange={(e) => setDate({ ...date, startDate: e.target.value })}
            />
            <input
              type="date"
              value={date.endDate}
              onChange={(e) => setDate({ ...date, endDate: e.target.value })}
            />
          </div>
        </div>
      </div>

      {/* vehicle filter */}

      <div className="bmsFilterContainer">
        {FilterData &&
          FilterData.map((item, index) => {
            return (
              <FilterBox key={index}
                title={item.name.charAt(0).toUpperCase() + item.name.slice(1)}
                label={item.options.map((item) => item.label)}
              />
            );
          })}
        {/* <FilterBox title={<h4>Locality</h4>} />
        <FilterBox title={<h4>Device Id</h4>} />
        <FilterBox title={<h4>Brand</h4>} />
        <FilterBox title={<h4>Modal</h4>} />
        <FilterBox title={<h4>Age</h4>} />
        <FilterBox title={<h4>Gender</h4>} />
        <FilterBox title={<h4>Profession</h4>} /> */}
      </div>

      {/* Cards Container */}

      <div className="bmsCardMainContainer">
        <div className="bmsCardContainer">
          <Card
            color="#0e1a77"
            frontContent={
              <div className="bmsFrontContent">
                <h1>0</h1>
                <p>Total Distance (KM)</p>
              </div>
            }
            backContent={<p>Back Content</p>}
          />
          <Card
            color="#0e1a77"
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <Card
            color="#0e1a77"
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <Card
            color="#0e1a77"
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <Card
            color="#0e1a77"
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <Card
            color="#0e1a77"
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
        </div>

        {/* Button container */}

        <div className="bmsBtnContainer">
          <button onClick={redirectToVehicle}>Vehicle Details</button>
          <button onClick={redirectToBms}>BMS Details</button>
          <button onClick={redirectToVcu}>VCU Details</button>
        </div>
      </div>
    </div>
  );
};
export default Bms;

// vehicle Details model mui


import dayjs from "dayjs";
import FilterAltIcon from "@mui/icons-material/FilterAlt";
import CustomModal from "../../components/modal/Modal";
import DateSelectionPicker from "../../components/dateRangePicker/DateSelectionPicker";
import Card from "../../components/cards/Card";
import BarChart from "../../components/chartGraphs/BarChart";
import BarChart from "../../components/chartGraphs/BarChart";

{/* modal */}
      {/* <CustomModal
        isOpen={modalOpen}
        handleClose={handleCloseModal}
        title={activeTab}
        data={filterData[activeTab]}
        onSubmit={handleModalSubmit}
        filterData={filterData} // Pass the filterData prop here
      /> */}


const [modalOpen, setModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(null);

  const [modalData, setModalData] = useState(null);

  const [chartData, setChartData] = useState({
    labels: [],

    datasets: [
      {
        label: "Users Gained ",
        data: [],
        backgroundColor: [
          "rgba(75,192,192,1)",
          "&quot;#ecf0f1",
          "#50AF95",
          "#f3ba2f",
          "#2a71d0",
        ],
        borderColor: "black",
        borderWidth: 2,
      },
    ],
  });

  const filterData = {
    State: ["Banglore", "Chennai", "Pune", "Mumbai", "Jaipur", "Bhubaneshwar"],
    City: ["Vehicle 1", "Vehicle 2", "Vehicle 3"],
    DeviceId: ["Customer 1", "Customer 2", "Customer 3"],
  };

  const handleOpenModal = (tab) => {
    setActiveTab(tab);
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  const handleModalSubmit = (data) => {
    console.log(data, "on handel modal submit");
    setModalData(data);
  };
//filter// import React from "react";
// import "../filterBox/filterBox.css";
// import { VscSearch } from "react-icons/vsc";
// import { CiEraser } from "react-icons/ci";
// import { FilterData } from "../../data/FilterData";
// const FilterBox = (props) => {
//   const { title, label } = props;

//   return (
//     <div className="filterBox">
//       <div className="filterTitle">
//         <span className="">{title}</span>
//         <span>
//           <CiEraser />
//         </span>
//       </div>

//       <div className="filterSearch">
//         <VscSearch size={20} />
//         <input type="text" size="10" placeholder="Search.." />
//       </div>

//       <div className="filterCheck">
//         {FilterData && FilterData.map((item, index) => (
//           <div key={index}>
//             {item.options.map((option, idx) => (
//               <div key={idx}>
//                 <input type="checkbox" />
//                 <label>{option.label}</label>
//               </div>
//             ))}
//           </div>
//         ))}
//         {/* <input type="checkbox" />
//         <label>{label}</label> */}
//       </div>
//     </div>
//   );
// };

// export default FilterBox;


import React, { useState } from "react";
import "../filterBox/filterBox.css";
import { VscSearch } from "react-icons/vsc";
import { CiEraser } from "react-icons/ci";

const FilterBox = (props) => {

    const { title, options, filterBmsData, setFilterBmsData } = props;

    const handleCheckboxChange = (optionValue, name) => {
        setFilterBmsData((prevData) => ({
            ...prevData,
            [name]: optionValue,
        }));
    };

    return (
        <div className="filterBox">
            <div className="filterTitle">
                <span className="">{title}</span>
                <span>
                    <CiEraser />
                </span>
            </div>

            <div className="filterSearch">
                <VscSearch size={20} />
                <input type="text" size="10" placeholder="Search.." />
            </div>

            {options?.map((option) => (
                <div key={option.value} className="filterCheck">
                    <input
                        type="checkbox"
                        value={option.value}
                        checked={
                            filterBmsData[title.toLowerCase()] === option.value
                        }
                        onChange={() =>
                            handleCheckboxChange(
                                option.value,
                                title.toLowerCase()
                            )
                        }
                    />
                    <label>{option.label}</label>
                </div>
            ))}
        </div>
    );
};

export default FilterBox;

// Card container
{/* <Card
            frontContent={
              <div className="frontContent">
                <h1>0</h1>
                <p>Total Distance (KM)</p>
              </div>
            }
            backContent={<ExpChart />}
          />
          <Card
            frontContent={<h2>Front Content</h2>}
            backContent={<BarChart />}
          />
          <Card
            frontContent={<h2>Front Content</h2>}
            backContent={<PieChart />}
          />
          <Card
            frontContent={<h2>Front Content</h2>}
            backContent={<LineChart />}
          />
          <Card
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          />
          <Card
            frontContent={<h2>Front Content</h2>}
            backContent={<p>Back Content</p>}
          /> */}

          // Btn container
          {/* <button onClick={redirectToVehicle}>Vehicle Details</button>
          <button onClick={redirectToBms}>BMS Details</button>
          <button onClick={redirectToVcu}>VCU Details</button> */}


          // different Colors for different Cards

          const colors = [
              "#ff0000",
              "#ffff00",
              "#00ff00",
              "#800080",
              "#ffa500",
              "#f5f5dc",
            ];

          {bmsCardData?.map((item, index) => {
            const colorIndex = index % colors.length;
            return (
              <Card
                key={index}
                frontContent={item.title}
                backContent={item?.description}
                //color="#0e1a77"
                color={colors[colorIndex]}
              />
            );
          })}


//filter box un checking not working code
import React, { useState } from "react";
import "../filterBox/filterBox.css";
import { VscSearch } from "react-icons/vsc";
import { CiEraser } from "react-icons/ci";

const FilterBox = (props) => {

    const { title, options, filterBmsData, setFilterBmsData, eraseAll } = props;
    
    const [searchQuery, setSearchQuery] = useState("");


    const handleCheckboxChange = (optionValue, name) => {
        
        setFilterBmsData((prevData) => {
            const updatedData = { ...prevData };
            if (prevData[name] === optionValue) {
                updatedData[name] = "";
            } else {
                updatedData[name] = optionValue;
            }
            return updatedData;
        });
    };


    const filteredOptions = options?.filter((option) =>
        option.label.toLowerCase().includes(searchQuery.toLowerCase())
    );

    
    return (
        <div className="filterBox">
            <div className="filterTitle">
                <span className="">{title}</span>
                <span onClick={eraseAll}>
                    <CiEraser />
                </span>
            </div>

            <div className="filterSearch">
                <VscSearch size={20} />
                <input
                    type="text"
                    size="10"
                    placeholder="Search.."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />
            </div>

            {filteredOptions?.map((option) => (
                <div key={option.value} className="filterCheck">
                    <input
                        type="checkbox"
                        value={option.value}
                        checked={filterBmsData[title.toLowerCase()] === option.value}
                        onChange={() =>
                            handleCheckboxChange(
                                option.value,
                                title.toLowerCase()
                            )
                        }
                    />
                    <label>{option.label}</label>
                </div>
            ))}
        </div>
    );
};

export default FilterBox;



//fireBase authentication 

import React, { useState } from 'react';
import firebase from 'firebase/app';
import 'firebase/auth';

// Initialize Firebase
const firebaseConfig = {
  // Your Firebase config object here
};

if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}

const EmailAuthentication = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSignUp = async () => {
    try {
      await firebase.auth().createUserWithEmailAndPassword(email, password);
      // User signed up successfully
    } catch (error) {
      console.error(error.message);
    }
  };

  const handleSignIn = async () => {
    try {
      await firebase.auth().signInWithEmailAndPassword(email, password);
      // User signed in successfully
    } catch (error) {
      console.error(error.message);
    }
  };

  const handleSignOut = async () => {
    try {
      await firebase.auth().signOut();
      // User signed out successfully
    } catch (error) {
      console.error(error.message);
    }
  };

  return (
    <div>
      <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" />
      <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" />
      <button onClick={handleSignUp}>Sign Up</button>
      <button onClick={handleSignIn}>Sign In</button>
      <button onClick={handleSignOut}>Sign Out</button>
    </div>
  );
};

export default EmailAuthentication;
// vehicle details page
// import React, { useState } from "react";
// import { useLocation, useNavigate } from "react-router-dom";
// import "../vehiclePage/vehicle.css";
// import FilterBox from "../../components/filterBox/FilterBox";
// import Card from "../../components/cards/Card";
// import { FilterData, vehicleCardData } from "../../data/FilterData";
// import { useDataHook } from "../../providers/AppDataProvider";
// import PieChart from "../../components/chartGraphs/PieChart";

// const VehicleDetails = () => {

//   const navigate = useNavigate();

//   const location = useLocation();

//   // const contextData = useContextCustomHook();
//   // console.log("Data", contextData);

//   const data = useDataHook()
//   // console.log(data)


//   const [date, setDate] = useState({
//     startDate: "",
//     endDate: "",
//   });

//   console.log(date);
  
//   const btnData = ["Vehicle Details", "Bms Details", "Vcu Details"];

//   // const handleBtn = (item) => {
//   //   // console.log(item)
//   //   if (item === "Vehicle Details") {
//   //     navigate("/vehicledetails");
//   //   } else if (item === "Bms Details") {
//   //     navigate("/bms");
//   //   } else if (item === "Vcu Details") {
//   //     navigate("/vcu");
//   //   }
//   // };

//     const handleBtn = (item) => {
//         const routes = {
//             "Vehicle Details" : "/vehicledetails",
//             "Bms Details" : "/bms",
//             "Vcu Details" : "/vcu"
//         };
//         const route = routes[item];
//         if (route) {
//             navigate(route);
//         }
//     };


//   const [filterBmsData, setFilterBmsData] = useState({
//     state: "",
//     locality: "",
//     deviceId: "",
//     brand: "",
//     modal: "",
//     age: "",
//     gender: "",
//     profession: "",
//   });

//   // const handleCheckBoxClear = (item) => {
//   //   // console.log(item)
//   //   if (item) {
//   //     if (item.name === "state") {
//   //       setFilterBmsData((prevData) => ({ ...prevData, state: "" }));
//   //     } 
//   //     else if (item.name === "locality")
//   //     {
//   //       setFilterBmsData((prevData) => ({ ...prevData, locality: "" }));
//   //     }
//   //     else {
//   //       return null;
//   //     } 
//   //   }
//   // };

//   const handleCheckBoxClear = (item) => {

//       console.log(item)
//     if (!item) return;
//     const fieldToUpdate = item.name;
//     if (fieldToUpdate === "state" ? fieldToUpdate === "state" : fieldToUpdate === "locality" ? fieldToUpdate === "locality" : fieldToUpdate === "deviceId" && fieldToUpdate === "deviceId") {
//         setFilterBmsData((prevData) => ({ ...prevData, [fieldToUpdate]: "" }));
//     }
//     else{
//       return null;
//     }
//   };

//     const getNextDay = (dateString) => {
//         const date = new Date(dateString);
//         date.setDate(date.getDate() + 1);
//         return date.toISOString().split("T")[0];
//     };

//   return (
    
//     <div className="vcuContainer">
//       {/* vehicle header */}

//       <div className="vcuHeader">
//         <div className="logo">
//           <img
//             className="logoImg"
//             src="https://s3.ap-south-1.amazonaws.com/greentiger.in-content/brand_icons/logo.png"
//             alt="logo"
//           />
//         </div>

//         <div className="vcuRightBlock">
//           <div className="title">
//             <h1>Vehicle Details</h1>
//           </div>

//           <div className="vehicleNumbers">
//             <h2>2</h2>
//             <p>Vehicles</p>
//           </div>
//           <div className="dateRange">
//           <input
//                     type="date"
//                     value={date.startDate || ""}
//                     onChange={(e) => {
//                     const selectedStartDate = e.target.value;
//                     const nextDay = new Date(selectedStartDate);
//                     nextDay.setDate(nextDay.getDate() + 1);
//                     const formattedNextDay = nextDay.toISOString().split("T")[0];
//                                 setDate({
//                                     startDate: selectedStartDate,
//                                     endDate: formattedNextDay,
//                                 });
//                             }}
//                             placeholder="Start Date"/>

//                         <input
//                             type="date"
//                             value={date.endDate || ""}
//                             min={
//                                 date.startDate ? getNextDay(date.startDate) : ""
//                             }
//                             onChange={(e) => {
//                                 const selectedEndDate = e.target.value;
//                                 const updatedEndDate =
//                                     selectedEndDate !== date.startDate
//                                         ? selectedEndDate
//                 : "";
//               setDate({ ...date, endDate: updatedEndDate });
//             }}placeholder="End Date"/>
//           </div>
//         </div>
//       </div>

//       {/* vehicle filter */}

//       <div className="filterContainer">
//         {FilterData.map((item, index) => (
//           <FilterBox
//             key={index}
//             title={item.name.charAt(0).toUpperCase() + item.name.slice(1)}
//             options={item.options}
//             filterBmsData={filterBmsData}
//             setFilterBmsData={setFilterBmsData}
//             eraseAll={() => handleCheckBoxClear(item)}
//           />
//         ))}
//       </div>

//       {/* Cards Container */}

//       <div className="cardMainContainer">
//         <div className="cardContainer">
//           {vehicleCardData?.map((item, index) => {
//             return (
//               <Card
//                 key={index}
//                 title={item.title}
//                 subTitle={item.subTitle}
//                 backContent={item?.description}
//                 chartLables={item?.labels}
//                 color="00aa13"
//                 isBarChart={
//                     index === 3 &&
//                     Array.isArray(item.description)
//                 }
//                 // isLineChart={
//                 //     index === 1 &&
//                 //     Array.isArray(item.description)
//                 // }
//               isPieChart={
//                   index === 1 ||
//                   index === 2 ||
//                   index === 5 &&
//                       (Array.isArray(item.description))                      
//               }/>
//             );
//           })}
//         </div>

//         {/* Button container */}

//         <div className="btnContainer">
//           {btnData.map((item, index) => {
//             return (
//               <button
//                 key={index}
//                 className={
//                   location.pathname === "/vehicledetails" &&
//                   item === "Vehicle Details"
//                     ? "vehicleBtn"
//                     : "inActiveBtn"
//                 }
//                 onClick={() => handleBtn(item)}>
//                 {item}
//               </button>
//             );
//           })}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default VehicleDetails;

//filter box
import React, { useState } from "react";
import "../filterBox/filterBox.css";
import { VscSearch } from "react-icons/vsc";
import { CiEraser } from "react-icons/ci";

const FilterBox = (props) => {
    const { title, options, filterBmsData, setFilterBmsData, eraseAll } = props;
    const [searchQuery, setSearchQuery] = useState("");

    const handleCheckboxChange = (optionValue, name) => {
        setFilterBmsData((prevData) => {
            const updatedData = { ...prevData };
            const currentValue = updatedData[name] || [];
            if (currentValue.includes(optionValue)) {
                updatedData[name] = currentValue.filter(
                    (value) => value !== optionValue
                );
            } else {
                updatedData[name] = [...currentValue, optionValue];
            }
            return updatedData;
        });
    };

    const filteredOptions = options.filter((option) =>
        option.label.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className="filterBox">
            <div className="filterTitle">
                <span className="">{title}</span>
                <span onClick={eraseAll}>
                    <CiEraser />
                </span>
            </div>

            <div className="filterSearch">
                <VscSearch size={20} />
                <input
                    type="text"
                    size="10"
                    placeholder="Search.."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />
            </div>

            {filteredOptions.map((option) => (
                <div key={option.value} className="filterCheck">
                    <input
                        type="checkbox"
                        value={option.value}
                        checked={filterBmsData[title.toLowerCase()]?.includes(
                            option.value
                        )}
                        onChange={() =>
                            handleCheckboxChange(
                                option.value,
                                title.toLowerCase()
                            )
                        }
                    />
                    <label>{option.label}</label>
                </div>
            ))}
        </div>
    );
};

export default FilterBox;

//Card.js files

import React, { useState } from "react";
import "../cards/card.css";
import LineChart from "../chartGraphs/LineChart";
import PieChart from "../chartGraphs/PieChart";
import BarChart from "../chartGraphs/BarChart";
// import BarChart from "../chartGraphs/BarChartNew";

const Card = (props) => {
    const {
        backContent,
        color,
        isPieChart,
        isLineChart,
        isBarChart,
        title,
        subTitle,
        chartLabels
    } = props;

    const [isFlipped, setIsFlipped] = useState(false);
    

    const handleFlip = () => {
        setIsFlipped(!isFlipped);
    };

    const notFlipped = () => {
        setIsFlipped(false);
    };

    return (
        <div
            style={{ backgroundColor: color }}
            className={`flip-card ${isFlipped ? "flipped" : ""}`} onMouseLeave={notFlipped} onMouseEnter={handleFlip}>
            <div className="flip-card-inner">
                <div className="flip-card-front">
                    <h1>{title}</h1>
                    <p>{subTitle}</p>
                </div>
                <div className="flip-card-back">
                    {isPieChart && (
                        <PieChart
                            chartData={backContent}
                            chartLabels={[
                                "Label 1",
                                "Label 2",
                                "Label 3",
                                "Label 4",
                                "Label 5",
                            ]}
                            // chartLabels={chartLabels}
                            chartBackgroundColor={[
                                "#FF6384",
                                "#36A2EB",
                                "#FFCE56",
                                "#4BC0C0",
                                "#9966FF",
                            ]}
                            hoverOffset={4}
                        />
                    )}
                    {isLineChart && (
                        <LineChart
                            chartData={backContent}
                            chartLabels={[
                                "Label 1",
                                "Label 2",
                                "Label 3",
                                "Label 4",
                                "Label 5",
                                "Label 6",
                            ]}
                            lineColor="blue"
                        />
                    )}
                    {isBarChart && (
                        <BarChart
                            data={backContent}
                            labels={[
                                "Label 1",
                                "Label 2",
                                "Label 3",
                                "Label 4",
                                "Label 5",
                            ]}
                            title="Bar Chart"
                        />
                    )}
                    {!isPieChart && !isLineChart && !isBarChart && backContent}
                </div>
            </div>
        </div>
    );
};

export default Card;
//LocationMap components
import React, { useState } from "react";
import { GoogleMap, LoadScript, MarkerF } from "@react-google-maps/api";
// const { NEXT_PUBLIC_MAPS_API_KEY } = process.env;

const LocationMap = ({ latitude, longitude }) => {
  const containerStyle = {
    width: "100%",
    height: "100%",
  };
  const [value, setValue] = useState({latitude:12.897510 , longitude:77.613457})
  const center = {
    lat: value.latitude,
    lng: value.longitude,
  };

  let ApiKey = 'AIzaSyAYX9RFzH6W0FQCNSx9mhw0o6y5qFDFDro'

  return (
    <LoadScript
      googleMapsApiKey={ApiKey}
    >
      <GoogleMap mapContainerStyle={containerStyle} center={center}  zoom={15}>
        <MarkerF position={center} />
      </GoogleMap>
    </LoadScript>
  );
};

export default LocationMap;